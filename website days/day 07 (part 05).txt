JS :
----

// getter = special method that makes a property readable
// setter = special method that makes a property writeable

// validate and modify a value when readin/writing a property



// class Rectangle{

//     constructor(width, height){
//         this.width = width;
//         this.height = height;
//     }

//     set width(newWidth){
//         if(newWidth > 0){
//             this._width = newWidth; /* ._ private property */ 
//         }
//         else{
//             console.error("Wdith must be a positive number");
//         }
//     }
    
//     set height(newHeight){
//         if(newHeight > 0){
//             this._height = newHeight;
//         }
//         else{
//             console.error("Height must be a positive number");
//         }
//     }

//     get width(){
//         return this._width;
//     }

//     get height(){
//         return this._height;
//     }

//     get area(){
//         return this._width * this._height;
//     }
// }

// const rectangle = new Rectangle(3, 4);

// console.log(rectangle.width);
// console.log(rectangle.height);
// console.log(rectangle.area);



class Person{
    
    constructor(firstName, lastName, age){
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }

    set firstName(newFirstName){
        if(typeof newFirstName === "string" && newFirstName.length > 0){
            this._firstName = newFirstName;
        }
        else{
            console.error("First name msut be a non-empty string");
        }
    }

    set lastName(newlastName){
        if(typeof newlastName === "string" && newlastName.length > 0){
            this._lastName = newlastName;
        }
        else{
            console.error("Last name msut be a non-empty string");
        }
    }

    set age(newAge){
        if(typeof newAge === "number" && newAge >= 0){
            this._age = newAge;
        }
        else{
            console.error("Age must be a non-negative number");
        }
    }

    get firstName(){
        return this._firstName;
    }

    get lastName(){
        return this._lastName;
    }

    get age(){
        return this._age;
    }

    get fullName(){
        return this._firstName + " " + this._lastName;
    }
}

const person = new Person("Spongebob", "Squarepants", 30);

console.log(person.firstName);
console.log(person.lastName);
console.log(person.age);
console.log (person.fullName);



------
HTML :
------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1 id="H1"></h1>
    <script src="index.js"></script>
</body>
</html>



-----
CSS :
-----

body{
    font-family: Arial, Helvetica, sans-serif;
    background-color: antiquewhite;
}

h1{
    color: rgb(244, 113, 101);
}

form{
    background-color: rgb(247, 243, 179);
    text-align: center;
    max-width: 350px;
    margin: auto;
    padding: 25px;
    border-radius: 10px;
    box-shadow: 5px 5px 15px rgb(244, 201, 115);
}

#textbox{
    width: 50%;
    text-align: center;
    font-size: 2em;
    border: 2px solid rgb(46, 2, 205);
    border-radius: 4px;
    margin-bottom: 15px;
}

label{
    font-size : 1.5em;
    font-weight: bold;   
}

button{
    margin-top: 15px;
    background-color: rgb(251, 74, 83);
    color: black;
    font-size: 1.5em;
    border: none;
    padding: 10px 15px;
    border-radius: 8px;
    cursor: pointer;
}

button:hover{
    background-color: rgb(248, 26, 37);
}

#result{
    font-size: 1.75em;
    font-weight: bold;
}
